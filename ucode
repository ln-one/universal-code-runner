#!/usr/bin/env zsh

# Get the directory where the script is located to source the common helpers.
_THIS_SCRIPT_DIR=${0:A:h}
source "${_THIS_SCRIPT_DIR}/_common.zsh"

# Displays a detailed help message in English.
function show_help_en() {
    local supported_langs_str
    for ext in ${(k)LANG_CONFIG}; do supported_langs_str+="${C_CYAN}.${ext}${C_RESET} "; done
    cat <<'EOF'

üöÄ Universal Code Runner - A smart compile-and-run utility.

This script automatically handles compiling and running code files,
letting you focus on writing code instead of build commands.

‚ñãUSAGE
    ucode [options] [file_to_run] [program_args...]

‚ñãMODES OF OPERATION
    1. Automatic Mode (No file provided)
       Finds the most recently modified source file and executes it.
    2. File Mode (File path provided)
       Directly compiles and runs the specified file.
       You can omit the file extension; e.g., 'ucode hello' will find 'hello.cpp'.

‚ñãOPTIONS
    -v, --verbose   Enable verbose mode for detailed step-by-step output.
    --sandbox      Run code in a restricted sandbox environment for security.
                      Limits network access, file system operations, and system resources.
    --timeout <sec> Set maximum execution time in seconds (0 = no limit).
    --memory <MB>  Set maximum memory usage in megabytes (0 = no limit).
    --ascii        Use ASCII characters for icons for compatibility.
    -l, --lang [en|zh] Force the language to English or Chinese for all messages and output.
    --no-cache     Disable compilation result caching.
    --clean-cache  Clean the compilation cache.
    -h, --help      Show this help message and exit.

‚ñãSUPPORTED LANGUAGES
EOF
    echo "    ${supported_langs_str}"
}

# Displays a detailed help message in Chinese.
function show_help_zh() {
    local supported_langs_str
    for ext in ${(k)LANG_CONFIG}; do supported_langs_str+="${C_CYAN}.${ext}${C_RESET} "; done
    cat <<'EOF'

üöÄ Universal Code Runner - Êô∫ËÉΩÁöÑÁºñËØë‰∏éËøêË°åÂ∑•ÂÖ∑.

Êú¨ËÑöÊú¨ÂèØËá™Âä®Â§ÑÁêÜ‰ª£Á†ÅÁöÑÁºñËØëÂíåËøêË°åÔºå
ËÆ©ÊÇ®‰∏ìÊ≥®‰∫é‰ª£Á†ÅÊú¨Ë∫´ÔºåËÄåÈùûÁπÅÁêêÁöÑÊûÑÂª∫ÂëΩ‰ª§„ÄÇ

‚ñã Áî®Ê≥ï
    ucode [ÈÄâÈ°π] [Ë¶ÅËøêË°åÁöÑÊñá‰ª∂] [Á®ãÂ∫èÂèÇÊï∞...]

‚ñã ËøêË°åÊ®°Âºè
    1. Ëá™Âä®Ê®°Âºè (‰∏çÊèê‰æõÊñá‰ª∂Âêç)
       Ëá™Âä®ÂØªÊâæÂΩìÂâçÁõÆÂΩï‰∏ãÊúÄÊñ∞‰øÆÊîπÁöÑÊ∫êÊñá‰ª∂Âπ∂ÊâßË°å„ÄÇ
    2. Êñá‰ª∂Ê®°Âºè (Êèê‰æõÊñá‰ª∂Ë∑ØÂæÑ)
       Áõ¥Êé•ÁºñËØëÂπ∂ËøêË°åÊÇ®ÊåáÂÆöÁöÑÊñá‰ª∂„ÄÇ
       ÊÇ®ÂèØ‰ª•ÁúÅÁï•Êñá‰ª∂Êâ©Â±ïÂêçÔºå‰æãÂ¶Ç 'ucode hello' ‰ºöËá™Âä®Êü•Êâæ 'hello.cpp'„ÄÇ

‚ñã ÈÄâÈ°π
    -v, --verbose   ÂêØÁî®ËØ¶ÁªÜÊ®°ÂºèÔºåÊòæÁ§∫ËØ¶ÁªÜÁöÑÁºñËØëÂíåÊâßË°åÊ≠•È™§„ÄÇ
    --sandbox      Âú®ÂèóÈôêÂÆâÂÖ®ÁéØÂ¢É‰∏≠ËøêË°å‰ª£Á†ÅÔºåÊèê‰æõÊ≤ôÁÆ±ÈöîÁ¶ª„ÄÇ
                      ÈôêÂà∂ÁΩëÁªúËÆøÈóÆ„ÄÅÊñá‰ª∂Á≥ªÁªüÊìç‰ΩúÂíåÁ≥ªÁªüËµÑÊ∫ê‰ΩøÁî®„ÄÇ
    --timeout <Áßí> ËÆæÁΩÆÊúÄÂ§ßÊâßË°åÊó∂Èó¥ÔºåÂçï‰Ωç‰∏∫ÁßíÔºà0 = Êó†ÈôêÂà∂Ôºâ„ÄÇ
    --memory <MB>  ËÆæÁΩÆÊúÄÂ§ßÂÜÖÂ≠ò‰ΩøÁî®ÈáèÔºåÂçï‰Ωç‰∏∫MBÔºà0 = Êó†ÈôêÂà∂Ôºâ„ÄÇ
    --ascii        ‰ΩøÁî® ASCII Â≠óÁ¨¶‰Ωú‰∏∫ÂõæÊ†áÔºå‰ª•ÂÖºÂÆπÊóßÁâàÁªàÁ´Ø„ÄÇ
    -l, --lang [en|zh] Âº∫Âà∂‰ΩøÁî®Ëã±ÊñáÊàñ‰∏≠ÊñáÊòæÁ§∫ÊâÄÊúâÊ∂àÊÅØÂíåËæìÂá∫„ÄÇ
    --no-cache     Á¶ÅÁî®ÁºñËØëÁªìÊûúÁºìÂ≠ò„ÄÇ
    --clean-cache  Ê∏ÖÁêÜÁºñËØëÁªìÊûúÁºìÂ≠ò„ÄÇ
    -h, --help      ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØÂπ∂ÈÄÄÂá∫„ÄÇ

‚ñã ÊîØÊåÅÁöÑËØ≠Ë®Ä
EOF
    echo "    ${supported_langs_str}"
}

# Determines which help message to show based on environment or flags.
function show_help() {
    local force_lang="$1"
    local effective_lang="en" # Default to English

    if [[ -n "$force_lang" ]]; then
        effective_lang="$force_lang"
    elif [[ "$LANG" == "zh_CN"* ]]; then
        effective_lang="zh"
    fi

    if [[ "$effective_lang" == "zh" ]]; then
        show_help_zh
    else
        show_help_en
    fi
}


# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
#  üöÄ Entry Point & Logic
# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

# --- Argument Parsing ---
export RUNNER_VERBOSE=false
export RUNNER_ASCII_MODE=false
export RUNNER_SANDBOX=false
export RUNNER_DEBUG=false
export RUNNER_TIMEOUT=0
export RUNNER_MEMORY_LIMIT=0
export RUNNER_DISABLE_CACHE=false
export RUNNER_LANGUAGE="auto"  # Default to auto-detect
HELP_LANG_FORCED=""

# Parse flags that affect the script's own behavior first.
while [[ $# -gt 0 && "$1" == -* ]]; do
  case "$1" in
    -l|--lang)
      if [[ "$2" == "en" || "$2" == "zh" ]]; then
        HELP_LANG_FORCED=$2
        RUNNER_LANGUAGE=$2
        shift 2
      else
        shift 1 # Ignore invalid --lang argument, just shift past it.
      fi
      ;;
    -v|--verbose) RUNNER_VERBOSE=true; shift ;;
    --ascii) RUNNER_ASCII_MODE=true; shift ;;
    --sandbox)
      RUNNER_SANDBOX=true
      shift
      if [[ "$(detect_sandbox_tech)" == "" ]]; then
        log_msg WARN "no_sandbox_tech"
        log_msg INFO "install_sandbox"
      fi
      ;;
    --debug)
      RUNNER_DEBUG=true
      RUNNER_VERBOSE=true
      shift
      if [[ "$RUNNER_DEBUG" == "true" ]]; then
        debug_lang
      fi
      ;;
    --timeout)
      [[ $# -lt 2 ]] && { log_msg ERROR "missing_timeout_value"; exit 1; }
      validate_numeric "$2" 1 3600 "Timeout" || exit 1
      RUNNER_TIMEOUT=$2
      shift 2
      ;;
    --memory)
      [[ $# -lt 2 ]] && { log_msg ERROR "missing_memory_value"; exit 1; }
      validate_numeric "$2" 50 4096 "Memory limit" || exit 1
      RUNNER_MEMORY_LIMIT=$2
      shift 2
      ;;
    --no-cache) RUNNER_DISABLE_CACHE=true; shift ;;
    --clean-cache)
      clean_cache 0 true
      log_msg SUCCESS "cache_cleaned"
      exit 0
      ;;
    -h|--help)
      show_help "$HELP_LANG_FORCED"
      exit 0
      ;;
    *)
      # Unknown option, assume it's not a flag
      break
      ;;
  esac
done

FILE=""
PROG_ARGS=()
SEARCH_MODE=false

# --- File Argument Handling ---
# This logic determines whether to run in File Mode or Auto-Search Mode.
#
# 1. If the first argument points to a valid, unambiguous file (with or without an extension),
#    we enter File Mode. That argument is the file to run, and the rest are program arguments.
# 2. If the first argument does NOT point to a file, we enter Auto-Search Mode.
#    All arguments are treated as program arguments for the auto-detected file.
# 3. If the first argument looks like a file but doesn't exist (e.g., `ucode missing.js`),
#    it's an error.

# Check if the first argument is a potential file name (i.e., not an option and not empty)
if [[ -n "$1" && "$1" != -* ]]; then
    local potential_file="$1"
    local found_file=""
    local is_ambiguous=false
    local base_name=""
    local matched_files=()

    # Case 1: Direct file match
    if [[ -f "$potential_file" ]]; then
        found_file="$potential_file"
    # Case 2: File name without extension provided
    elif [[ "$potential_file" != *.* ]]; then
        base_name="$potential_file"
        for ext in ${(k)LANG_CONFIG}; do
            if [[ -f "${base_name}.${ext}" ]]; then
                matched_files+=("${base_name}.${ext}")
            fi
        done

        if [[ ${#matched_files[@]} -eq 1 ]]; then
            found_file="${matched_files[1]}"
        elif [[ ${#matched_files[@]} -gt 1 ]]; then
            is_ambiguous=true
        fi
    fi

    # --- Mode Decision ---
    if [[ -n "$found_file" ]]; then
        # A unique file was found -> File Mode
        FILE="$found_file"
        shift # Consume the file argument from the list
        PROG_ARGS=("$@")
        log_msg INFO "using_file" "${C_CYAN}${FILE}${C_RESET}"
    elif [[ "$is_ambiguous" == "true" ]]; then
        # Ambiguous file specifier -> Error
        local found_files_str
        found_files_str=$(IFS=, ; echo "${matched_files[*]}")
        log_msg ERROR "ambiguous_file_specifier" ""$base_name"" ""$found_files_str""
        exit 1
    else
        # No file found matching the first argument.
        # Check if it looked like a file (e.g., had an extension) to give a better error.
        if [[ "$potential_file" == *.* && ! -f "$potential_file" ]]; then
            log_msg ERROR "file_not_exist" "${C_CYAN}${potential_file}${C_RESET}"
            exit 1
        fi
        # Otherwise, assume Auto-Search Mode. The first argument was not a file.
        SEARCH_MODE=true
        PROG_ARGS=("$@") # All original arguments are program args
    fi
else
    # No file argument provided, or it's an option -> Auto-Search Mode
    SEARCH_MODE=true
    PROG_ARGS=("$@") # All original arguments are program args
fi


# Validate and sanitize program arguments
if [[ ${#PROG_ARGS[@]} -gt 0 ]]; then
  # Validate arguments for potential injection attacks
  log_msg DEBUG "validating_args"
  # Check for potentially dangerous characters in arguments
  for arg in "${PROG_ARGS[@]}"; do
    if echo "$arg" | grep -q '[;&|<>$()\\`]'; then
      log_msg WARN "unsafe_arg" "${C_YELLOW}${arg}${C_RESET}"
      log_msg INFO "args_quoted"
    fi
  done
fi

# --- Shebang Detection ---
# Tries to determine the language from the shebang line (e.g., #!/usr/bin/env python)
# @param: $1 - The absolute path to the file to check.
# @return: The language extension (e.g., "py", "sh") if found, otherwise empty string.
function detect_lang_from_shebang() {
    local file_path="$1"
    local shebang_line
    # Ensure the file exists and is readable before trying to read from it.
    if [[ -r "$file_path" ]]; then
        shebang_line=$(head -n 1 "$file_path")
        # Check if the line starts with #!
        if [[ "$shebang_line" == "#!"* ]]; then
            # Use a case statement for clarity and efficiency
            case "$shebang_line" in
                *python*) echo "py"; return ;;
                *node*)   echo "js"; return ;;
                *bash*)   echo "sh"; return ;;
                *zsh*)    echo "sh"; return ;;
                *sh*)     echo "sh"; return ;;
                *perl*)   echo "pl"; return ;;
                *ruby*)   echo "rb"; return ;;
            esac
        fi
    fi
    # Return empty if no match or file not readable
    echo ""
}

# --- File Discovery (if in search mode) ---
if [[ "$SEARCH_MODE" == "true" ]]; then
  log_msg STEP "searching_file"
  
  # The Zsh glob qualifier 'om' (order by modification time) is unreliable on
  # some network filesystems like Google Drive. We will use a more robust
  # 'find' command combined with a loop to identify the latest file.
  local latest_file=""
  local latest_mod_time=0
  local file
  
  local find_name_args=()
  for ext in ${(k)LANG_CONFIG}; do
    find_name_args+=(-o -iname "*.$ext")
  done
  if [[ ${#find_name_args[@]} -gt 0 ]]; then
    find_name_args_final=("${find_name_args[@]:1}")
  else
    find_name_args_final=()
  fi

  # The while loop is wrapped in braces with stdout redirected to /dev/null
  # to suppress any extraneous output from the user's shell environment (e.g. `mod_time=...`)
  {
    while IFS= read -r file; do
      local mod_time
      mod_time=$(stat -c %Y "$file" 2>/dev/null)
      if [[ -n "$mod_time" && "$mod_time" -gt "$latest_mod_time" ]]; then
        latest_mod_time=$mod_time
        latest_file=$file
      fi
    done < <(find . -type f \( "${find_name_args_final[@]}" \) 2>/dev/null)
  } >/dev/null

  local found_file=$latest_file
  
  if [[ -z "$found_file" ]]; then
    log_msg ERROR "no_supported_files" ".${(j:|:)${(k)LANG_CONFIG}}"
    exit 1
  fi
  
  FILE=$found_file
  log_msg SUCCESS "auto_selected_file" "${C_CYAN}$FILE${C_RESET}"
fi

if [[ ! -f "$FILE" ]]; then
  log_msg ERROR "file_not_found" "${C_CYAN}$FILE${C_RESET}"
  exit 1
fi

ABSOLUTE_FILE_PATH=$(realpath "$FILE")
# First, try to detect language from shebang
EXT=$(detect_lang_from_shebang "$ABSOLUTE_FILE_PATH")
# If shebang detection fails, fall back to file extension
if [[ -z "$EXT" ]]; then
    EXT="${ABSOLUTE_FILE_PATH##*.}"
fi

log_msg STEP "preparing_to_execute" "${C_CYAN}$ABSOLUTE_FILE_PATH${C_RESET}"
log_msg INFO "file_type_detected" "${C_WHITE}.$EXT${C_RESET}"

if [[ -n "${LANG_CONFIG[$EXT]}" ]]; then
  # If timeout is enabled and available, use it directly
  if [[ -n "$RUNNER_TIMEOUT" && "$RUNNER_TIMEOUT" -gt 0 ]] && command -v timeout &>/dev/null; then
    log_msg INFO "time_limit" "${C_YELLOW}${RUNNER_TIMEOUT}s${C_RESET}"
    
    # Use timeout command to limit execution time
    timeout --kill-after=2 "$RUNNER_TIMEOUT" "${_THIS_SCRIPT_DIR}/_compile_and_run.zsh" "$ABSOLUTE_FILE_PATH" "${PROG_ARGS[@]}"
    exit_code=$?
    
    # Check if timeout occurred
    if [[ $exit_code -eq 124 || $exit_code -eq 137 ]]; then
      log_msg ERROR "execution_timeout" "${C_YELLOW}${RUNNER_TIMEOUT}s${C_RESET}"
      exit $exit_code
    fi
    
    exit $exit_code
  else
    # Normal execution without timeout
    "${_THIS_SCRIPT_DIR}/_compile_and_run.zsh" "$ABSOLUTE_FILE_PATH" "$EXT" "${PROG_ARGS[@]}"
  fi
else
  log_msg ERROR "unsupported_file_type" "${C_WHITE}.$EXT${C_RESET}"
  log_msg INFO "supported_types" "${C_WHITE}.${(j:|:)${(k)LANG_CONFIG}}${C_RESET}"
  exit 1
fi